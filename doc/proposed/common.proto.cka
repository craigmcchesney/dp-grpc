//
// common.proto
//
// Contains RPC messages common to all services.
//
// since: July, 2023
// version: 1.0.0
//
// NOTES:
//
//
// TODO:
// - Naming redefinitions and suggestions (CKA)
//



syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.common";


//
// ------------------- Miscellaneous Definitions ---------------------------
//

/*
 * Generic attribute.
 */
message Attribute {
  string name = 1;
  string value = 2;
}

/*
 * Metadata associated with an ingestion/archiving event
 */
message EventMetadata {
  string eventDescription = 1;
  Timestamp startTimestamp = 2;
  Timestamp stopTimestamp = 3;
}


//
// ------------------- Time Definitions ---------------------------
//

/*
 * Time instant described by epoch.
 */
message Timestamp {
  uint64 epochSeconds = 1;  // seconds past unix epoch - 1st january 1970
  uint64 nanoseconds = 2;   // nanoseconds - sub-second precision down to the nanosecond
}

/*
 * Ordered list of Timestamp messages.
 */ 
message TimestampList {
  repeated Timestamp timestamps = 1;
}

/*
 * Collection of timestamps identified by sampling interval.
 * 
 * Uniform sampling is assumed within sampling interval.
 * Thus, the ordered collection of timestamps are defined as a contiguous, equally-spaced point set 
 * {t1, t2, ..., tN} within the following interval:
 * 
 *    [startTime, (count-1)*periodNanos]
 *
 * The timestamps {t1, t2, ..., tN} are then given by
 * 
 *    t1 = startTime, 
 *    t2 = startTime + 1 * periodNanos,
 *    t3 = startTime + 2 * periodNanos,
 *    ...
 *    tN = startTime + (N-1) * periodNanos,
 *
 * where N = count.
 */
//message SamplingInterval {	// CKA: This isn't really an interval, i.e. [t1, t1]   
//message UniformSamplingSpec {	// CKA: Maybe this should be called "UniformSampling" or "UniformSamplingSpec" - more precise
message UniformSampleTimes {    // CKA: I'll let you pick.  This is even more precise but I'm obviously over-thinking.   
  Timestamp startTime = 1;
  uint64 periodNanos = 2;
  uint32 count = 3;
}
// CKA: The idea of a "uniform-sampling interval" would look like this 
// message {
//	  Timestamp startTime = 1;
//    Timestamp stopTime = 2;
//    uint32 	count = 3;
// }
//
// Which is attractive because it has the start time and stop time - may make lookups and table construction 
// easier (?)

//message FixedIntervalTimestampSpec {
//  Timestamp startTime = 1;
//  uint64 sampleIntervalNanos = 2;
//  uint32 numSamples = 3;
//}

/*
 * Specifies the set of timestamps for a dataset collection.
 *
 * The timestamps are identified as either of the following:
 * 
 *  - UniformSampleTimes - time instants required for uniform sampling
 *  - TimestampList - explicit set of ordered time instants 
 *
 */
message DataTimestamps {
  oneof value_oneof {
    UniformSampleTimes interval = 1;
    TimestampList timestampList = 2;
  }
}

//message DataTimeSpec {
//  oneof value_oneof {
//    FixedIntervalTimestampSpec fixedIntervalTimestampSpec = 1;
//    TimestampList timestampList = 2;
//  }
//}


//
// ------------------- Ingestion Definitions ---------------------------
//

/*
 * The unit of ingestion.
 *
 * Data is ingested into the Data Platform in tabular form.  The table consists
 * of a collection of timestamps and an collection of table columns containing
 * heterogeneous data.
 *  - dataTimeSpec - set of (ordered) timestamps for each column
 *  - dataColumns - an (unordered) collection of DataColumn messages.  
 *
 * Each data column must be the same size, the number of timestamps identified in dataTimeSpec.
 *
 * NOTES (CKA):
 * - Perhaps this should be moved to ingestion.proto?
 */
message DataFrame {  // CKA - Rename suggestion
//message DataTable {
  DataTimestamps dataTimeSpec = 1;
  repeated DataColumn dataColumns = 2;
}

/*
 * A named vector of heterogeneous data values.
 *
 */
message DataColumn {
  string name = 1;
  repeated DataValue dataValues = 2;
}


//
// ------------------- Data Definitions ---------------------------
//

/*
 * Unit of Heterogeneous Scalar Data
 *
 * A scalar value supported by both Protocol Buffers and all native languages it builds.
 * This type should be built into native language primitive types, or "nearly primitive".
 *
 * NOTES:
 * - This is a performance addition to the interface for support of machine learning. 
 */
 message ScalarValue {
 	oneof value {
  		string		stringValue = 1;		// character string 
  		bool		boolValue = 2;			// logical Boolean 
  		sint32		intValue = 3;			// signed integer value 
  		sint64		longValue = 4;			// long (signed) integer
  		float		floatValue = 5;			// 32 byte float value
  		double		doubleValue = 6;		// 64 byte float value (double)
  		bytes		bytesValue = 7;			// raw data as byte string
  	}
 }
 
 
 /*
  * Unit of Numeric Scalar Data
  *
  * A numeric (scalar) value translates to a primitive type in the native language, specifically,
  * a primitive type representing a numeric value (one supporting algebraic operations).
  *
  * NOTES:
  * - This type is suggested for data science support.  Specifically, types that can be directly
  *   translated into a vector for machine learning.
  */
message NumericValue {

 	oneof value {
  		bool		boolValue = 1;			// logical Boolean 
  		sint32		intValue = 2;			// signed integer value 
  		sint64		longValue = 3;			// long (signed) integer
  		float		floatValue = 4;			// 32 byte float value
  		double		doubleValue = 5;		// 64 byte float value (double)
  	}
}

 
/*
 * Unit of Heterogeneous Data
 *
 * The message includes both a data field 'value' and a status field 'status'.  
 * The 'value' field is the actual data value while the 'status' field represents the 
 * condition of the value (i.e., typically at acquisition time).  Future versions may include
 * the status of the value within the archive (e.g., corrupt, truncated, etc.).
 *
 * The field 'value' is a union of all possible data types currently supported.  It represents one
 * unit of heterogeneous data.  Only one data type may be included in the message.
 *
 * The 'status' field is structure defined as an enclosed RPC message.  It contains information about
 * value during acquisition, such as value alarm conditions, acquisition conditions, and any associated
 * message.  This field is subject to future modification for expanded use case. 
 */
message DataValue {

/* ------ REPLACED -------- */
/*
//  oneof value_oneof { // CKA - identifier change
  oneof value {
    string stringValue = 1;             // String value
    double floatValue = 2;              // floating point value CKA - maybe doubleValue?
    uint64 intValue = 3;                // integer value		CKA - This should be int32 or int64
    bytes byteArrayValue = 4;           // byte array value
    bool booleanValue = 5;              // boolean value
    Image image = 6;                    // image value
    Structure structureValue = 7;      // structure value
    Array arrayValue = 8;              // Array value
  }
*/
/* ------ REPLACED -------- */
  
  /* 
   * Heterogeneous Data Value
   * 
   * CKA NOTES:
   * Since we're going all in I redefined the entire value union.
   * 
   * Includes corrections 
   *  - ints and longs should have signs.
   *  - uint32 and uint64 expand to 'int' and 'long' in Java but 'uint32' and 'uint64' in C++
   *  - Protobuf expands int32 and int64 efficiently for unsigned values but not when negative
   *  - sint32 and sint64 expand more efficiently than int32 and int64 for negative numbers
   *  - We can change sint32 -> int32 and sint64 -> int64 if necessary, without affecting language code
   *
   *  - Direct support for scalar values could be added with Scalar
   *  - Support of scalar vectors and/or multi-dimensional arrays can also be added if needed (Vector, NDArray)
   */
  oneof value {
  	string		stringValue = 1;		// character string 
  	bool		booleanValue = 2;		// logical Boolean 
  	sint32		intValue = 3;			// signed integer value 
  	sint64		longValue = 4;			// long (signed) integer
  	float		floatValue = 5;			// 32 byte float value
  	double		doubleValue = 6;		// 64 byte float value (double)
  	bytes		byteArrayValue = 7;		// raw data as byte string
  	Array		arrayValue = 8;			// heterogeneous array (no dimensional restrictions as of yet)
  	Structure	structValue = 9;		// general data structure (no width or depth restrictions yet)
  	Image		imageValue = 10;		// general image value
  	}	
  
  /*
   * Status of Value
   * 
   * Currently represents the condition of the value or associated hardware and software at 
   * acquisition time.
   */ 
  ValueStatus status = 15;		// CKA - no status in original DataValue

  /*
   * Status of current data value.
   *
   * The current status definition reflects the value at acquisition time 
   * (e.g., as in the EPIC record fields).
   *
   * In the future we may wish to support archiving status as well (CLIENT_STATUS?). 
   */
  message ValueStatus {

    string message = 1;
    StatusCode statusCode = 2;
    Severity severity = 3;

    /*
     * Source of an Exceptional Status
     */
    enum StatusCode {
      NO_STATUS = 0;		// no status condition
      DEVICE_STATUS = 1;	// hardware device condition
      DRIVER_STATUS = 2;	// hardware driver condition
      RECORD_STATUS = 3;	// device database record condition
      DB_STATUS = 4; 		// device database condition
      CONF_STATUS = 5;		// configuration condition
      UNDEFINED_STATUS = 6;	// unknown or undefined status condition
      CLIENT_STATUS = 7;	// data provider client condition
    }

    /*
     * Value Alarm
     *
     * Pre-configured alarm conditions triggered by current data value.
     */
    enum Severity {
      NO_ALARM = 0;			// no alarm conditions
      MINOR_ALARM = 1;		// value has triggered a minor alarm condition
      MAJOR_ALARM = 2;		// value has triggered a major alarm condition
      INVALID_ALARM = 3;	// value has triggered an invalid alarm condition
      UNDEFINED_ALARM = 4;	// unknown or undefined alarm condition present
    }
  }
}


/*
 * One-Dimensional Scalar Array
 *
 * Explicitly represents a one-dimesional array of heterogeneous scalar values.  The enforcement of dimensionality
 * is by convention, the service implementation assumes that all internal values are scalar in nature.  This
 * condition supports increased performance.     
 *
 * NOTES:
 * - Added direct support for scalar values with Scalar message (CKA)
 */  
message Vector {
//	repeated NumericValue	values = 1;
	repeated ScalarValue	values = 1;
//	repeated DataValue		values = 1;
}


/*
 * Multi-Dimensional Scalar Array
 *
 * Direct support for multi-dimensional arrays of scalar values.  The message contains two fields:
 *
 *  dims - ordered collection of array dimensions {n1, n2, ..., nN} where N is the size of the array
 *  values - ordered collect of flattened arrays values
 *
 * Thus, the size of the 'value' field must be n1*n2*...*nN.
 *
 * By convention, the service implementation assumes that array packing is done in REVERSE ORDER of dimensions.
 * For example, to unpack a 3-dimensional array (N=3) A for transmission the following algorithm holds:
 *
 *		int n = 0; 
 *		int n1=dim[0]; 
 *		int n2=dim[1]; 
 *		int n3=dim[2];
 *		for (i=0; i<n1; i++) {
 *			for (j=0; j<n2; j++) {
 *				for (k=0; k<n3; j++) {
 * 					value[n] = A[i][j][k];
 *					n++;
 *				}
 *			}
 *		}
 *
 * NOTES (CKA):
 * - We can change array packing order if necessary (e.g., FORWARD order of dimensions).
 * - We can restrict the number of dimensions for practicality (explicitly or implicitly)
 */
 message NDArray {
 	repeated uint32			dims = 1;		// vector of array dimensions
 	repeated ScalarValue	values = 2;		// vector of unpacked array values
 }


/*
 * General Array
 * 
 * Although the current Array message is represented as a vector of values, the Array message supports 
 * array nesting.  Thus, multi-dimensional arrays are currently supported in this format (i.e., Array's of
 * Array's).  
 *
 * Note also that arrays are general and may include other complex data structures as elements.  For example,
 * an array of data structures, an array of vectors, or an array of images.
 *
 * Currently array dimensionality is indefinite however future restrictions may be required for practical
 * service implementation.
 */
message Array {
  repeated DataValue dataValues = 1;
}


/*
 * General Data Structure.
 *
 * Each level of a general data structure may have an indefinite number of fields consisting
 * of (name, value) pairs.  There may be practical restrictions on the number of fields within
 * service implementations (as of yet unreported).
 *
 * Note that the Structure message supported nested structure, and thus, complex data structures
 * can be represented.  The 'value' field within a (name, value) pair may contain another Structure 
 * message supporting multi-level structuring.  The depth of the structuring is currently indefinite
 * but may have practical restrictions within service implementation (yet unreported).
 */
message Structure {
  repeated Field fields = 1;

  /*
   * CKA- Perhaps this should be an enclosed message of Structure?
   * This message will unlikely be used elsewhere.
   */
  message Field {
    string name = 1;
    DataValue value = 2;
  }

}


/*
 * An image file.
 * 
 * Images are stored as raw data as a byte vector.  Interpretation is determined by standard
 * image file formats enumerated by FileType.
 */
message Image {

  bytes image = 1;
  FileType fileType = 2;

  /*
   * Image file format.  Also used as file extension.
   */
  enum FileType {
    RAW = 0;
    JPEG = 1;
    GIF = 2;
    TIFF = 3;
    BMP = 4;
    PNG = 5;
    EPS = 6;
    SVG = 7;
    PDF = 8;
  }
}


//
// ------------------- Common Messages ---------------------------
//

/*
 * NOTES:
 *  - Perhaps this should be specific to ingestion, query, or annotation?
 *
 *  - This does appear to be common in ingestion.proto, query.proto, and annotation.proto
 */
enum ResponseType {
  ACK_RESPONSE = 0;
  REJECT_RESPONSE = 1;
  SUMMARY_RESPONSE = 2;
  DETAIL_RESPONSE = 3;
}

/*
 * Perhaps this should be specific to ingestion, query, or annotation?
 */
message RejectionDetails { // CKA - Rename suggestion
//message RejectDetails {

  string message = 1;
  Reason cause = 2;  // CKA - Rename suggestion
//  Reason rejectReason = 2;

  enum Reason {  // CKA - Rename suggestion
//  enum RejectReason {
    INVALID_REQUEST_REASON = 0;
  }
}

