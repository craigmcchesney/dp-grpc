//
// ingestion.proto
//
// Contains RPC messages and interface specific to the Ingestion Service.
//
// since: July, 2023
// version: 1.0.0
//
// NOTES:
//
//
// TODO:
// - Naming suggestions (CKA)
//



syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.ingestion";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * The Ingestion Service Interface
 *
 * Defines RPC operations for data provider registration and ingestion.
 *
 * register - registers data provider and obtain provide UID
 * streamingIngestion - data ingestion via gRPC streaming
 * unaryIngestion - data ingestion via standard RPC 
 */
service DpIngestionService {
  rpc register (RegistrationRequest) returns (RegistrationResponse); // CKA - Rename suggestion (provider is implicit)
//  rpc registerProvider (RegistrationRequest) returns (RegistrationResponse);
  rpc streamingIngestion (stream IngestionRequest) returns (stream IngestionResponse);
  rpc unaryIngestion (IngestionRequest) returns (IngestionResponse);
}


//
// ------------------- Provider Registration ---------------------------
//

/*
 * Data provider Registration Request
 * 
 * Data providers are registered by name, which must be unique (field providerName).
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */
message RegistrationRequest {	// CKA - Rename suggestion - Looks like these won't work (name space collisions)
//message RegisterProviderRequest {
  string providerName = 1;
  repeated Attribute attributes = 2;
  Timestamp requestTime = 3;
}

/*
 * Data Provider Registration Response
 *
 * The response message contains the UID for the data provider.
 *
 * The data provider UID is contained with the RegistrationDetails message.  If the
 * registration fails a RejectionDetails message is set in lieu of the RegistrationDetails
 * message.
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */  
message RegistrationResponse {  // CKA - Rename suggestion - Looks like these won't work (name space collisions)
//message RegisterProviderResponse {

  ResponseType responseType = 1;
  Timestamp responseTime = 2;

  oneof details {  // CKA - Rename suggestion
//  oneof details_oneof {
    RegistrationDetails registrationDetails = 10;
    RejectionDetails rejectionDetails = 11;
  }
}

/*
 * Data Provider Registration Record
 *
 * This record message contains the UID of the data provider upon successful registration 
 * with the Ingestion Service.
 */
message RegistrationDetails {  // CKA - Rename suggestion
//message RegisterProviderDetails {
  uint32 providerId = 1;
}


//
// ------------------- Data Ingestion ---------------------------
//

message IngestionRequest {
  uint32 providerId = 1;
  string clientRequestId = 2;
  Timestamp requestTime = 3;
  repeated Attribute attributes = 4;
  EventMetadata eventMetadata = 5;
  DataFrame dataTable = 6;
}

message IngestionResponse {

  uint32 providerId = 1;
  string clientRequestId = 2;
  ResponseType responseType = 3;
  Timestamp responseTime = 4;

  oneof details_oneof {
    AckDetails ackDetails = 10;
    RejectionDetails rejectionDetails = 11;
  }
}

message AckDetails {
  uint32 numRows = 1;
  uint32 numColumns = 2;
}
