syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.common";

///////////////////////////////////////////////////////////
// StatusCode
///////////////////////////////////////////////////////////
enum StatusCode {
  NO_STATUS = 0;
  DEVICE_STATUS = 1;
  DRIVER_STATUS = 2;
  RECORD_STATUS = 3;
  DB_STATUS = 4;
  CONF_STATUS = 5;
  UNDEFINED_STATUS = 6;
  CLIENT_STATUS = 7;
}

enum Severity {
  NO_ALARM = 0;
  MINOR_ALARM = 1;
  MAJOR_ALARM = 2;
  INVALID_ALARM = 3;
  UNDEFINED_ALARM = 4;
}

enum FileType {
  RAW = 0;
  JPEG = 1;
  GIF = 2;
  TIFF = 3;
  BMP = 4;
  PNG = 5;
  EPS = 6;
  SVG = 7;
  PDF = 8;
}

/**
 * The status of the operation
 *
 * @param status    The status of the operation
 * @param severity  The severity of the operation
 * @param message   The message of the operation
 */
message OperationStatus {
  Severity severity = 1;
  StatusCode status = 2;
  string message = 3;
}

message Message {
  string message = 1;
}
/**
 * Data represents the smallest data that can be stored
 * It is essentially a list of datum of any type including structures and arrays
 *
 * @param data[] the set of data to be included in the dataset
 */
message Data {
  string name = 1;
  repeated Datum data = 2;
}

/**
 * If sample data is scalar and uni-variate it can be aggregated to its arithmetic mean and described using this
 * data format.  Note that the first timestamp is taken from the first timestamp in the associated timeReference
 *
 * @name            the name of the PV
 * @value           the arithmetic mean of the sample
 * @n               the number of items in the sample.  If this co-exists in a snapshot with other datasets n must be the same as the size of all other datasets
 * @dispersion      the deviation of the values in the sample, from the sample mean, measured in standard deviations
 * @first           the first value in the sample
 * @last            the last value in the sample
 * @max             the maximum value in the sample
 * @min             the minimum value in the sample
 * @irstTimestamp   the timestamp of the first value in the sample
 * @lastTimestamp   the timestamp of the last value in the sample
 */
message AggregatedData {
  string name = 1;
  double value = 2;

  uint32 n = 10;
  double dispersion = 11;
  double first = 12;
  double last = 13;
  double min = 14;
  double max = 15;
  Timestamp snapshotTimestamp = 16;
  Timestamp firstTimestamp = 17;
  Timestamp lastTimestamp = 18;
}

/**
 * Timestamp data contains a list of timestamp values.
 */
message TimestampData {
  repeated Timestamp timestamps = 1;
}

/**
 * A union representing a valid item of data that can be stored in any PV
 * string, float, int, bool, structure or array
 */
message Datum {
  oneof value_oneof {
    string stringValue = 1;             // String value
    double floatValue = 2;              // floating point value
    uint64 intValue = 3;                // integer value
    bytes byteArrayValue = 4;           // byte array value
    bool booleanValue = 5;              // boolean value
    Image image = 6;                    // image value
    Structure structureValue = 10;      // structure value
    Array arrayValue = 11;              // Array value
  }
  OperationStatus status = 20;         // status enum value
}

message Image {
  FileType type = 1;
  bytes image = 2;
}

/**
 * A PV value structure definition
 * A list of fields
 */
message Structure {
  repeated Field fields = 1;
}

/**
 * A PV value array definition
 * A list of values
 */
message Array {
  repeated Datum value = 1;
}

/**
 * An attribute
 *
 * @param name    the name of the attribute
 * @param value   the value of the attribute.  Must be a string
 */
message Attribute {
  string name = 1;
  string value = 2;
}

/**
 * Attribute names
 *
 * @param name    set of attribute names
 */
message AttributeNames {
  repeated string name = 1;
}

/**
 * A PV Structure field
 *
 * @param name the name of the field
 * @param value the value of the field
 */
message Field {
  string name = 1;
  Datum value = 2;
}


///////////////////////////////////////////////////////////
// Timestamp
///////////////////////////////////////////////////////////
message Timestamp {
  uint64 epochSeconds = 1;  // seconds past unix epoch - 1st january 1970
  uint64 nanoseconds = 2;   // nanoseconds - sub-second precision down to the nanosecond
}


