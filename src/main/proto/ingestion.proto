//
// ingestion.proto
//
// Contains RPC messages and interface specific to the Ingestion Service.

syntax = "proto3";

package dp.service.ingestion;

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.ingestion";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * The Ingestion Service Interface
 *
 * Defines RPC operations for data provider registration and ingestion.
 *
 */
service DpIngestionService {

  /*
   * registerProvider: Registers an ingestion data provider.
   *
   * TODO: docs
   */
  rpc registerProvider (RegisterProviderRequest) returns (RegisterProviderResponse);

  /*
   * ingestData: Unary (non-streaming) data ingestion.
   *
   * This method sends a single IngestDataRequest and receives a single IngestDataResponse.  Validation,
   * rejection / acknowledgment, asynchronous handling, and request status reporting is otherwise the same as for the
   * ingestDataBidiStream() method.
   */
  rpc ingestData (IngestDataRequest) returns (IngestDataResponse);

  /*
   * ingestDataStream: Unidirectional client-side streaming data ingestion.
   *
   * TODO: docs
   */
  rpc ingestDataStream (stream IngestDataRequest) returns (IngestDataStreamResponse);

  /*
   * ingestDataBidiStream(): Bidirectional streaming data ingestion.
   *
   * The Ingestion Service performs initial validation on each IngestDataRequest in the stream, and replies immediately
   * with a IngestDataResponse message indicating acknowledgement for a valid request, or rejection of an invalid one.
   * The request is then added to a queue for async ingestion handling.
   *
   * The ingestion handling of each request in the stream is performed asynchronously.  The Ingestion Service writes
   * data from the request to the "buckets" collection in MongoDB, adding one document to the collection for each
   * "column" of data in the request's DataFrame object.
   *
   * A separate MongoDB "requestStatus" collection is used to note the processing status of each request,
   * with a document for each handled request.  The collection is keyed by the providerId and clientRequestId
   * specified in the IngestDataRequest.  This collection can be used by an administrative monitoring process
   * to detect and notify about errors in the ingestion process.
   *
   * The method returns a stream of IngestDataResponse messages, one per request.  Each response includes providerId
   * and clientRequestId for use by the client in mapping a response to the corresponding request.  The response
   * message only indicates if validation succeeded or failed.  Because ingestion handling is performed asynchronously,
   * the MongoDB "requestStatus" collection must be used to determine the success or failure of individual requests.
   */
  rpc ingestDataBidiStream (stream IngestDataRequest) returns (stream IngestDataResponse);

  /*
   * queryRequestStatus()
   *
   * TODO: docs
   */
  rpc queryRequestStatus(QueryRequestStatusRequest) returns (QueryRequestStatusResponse);
}


//
// ------------------- Provider Registration ---------------------------
//

/*
 * Data provider Registration Request
 *
 * Data providers are registered by name, which must be unique (field providerName).
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */
message RegisterProviderRequest {
  string providerName = 1; // Provider name uniquely identifies ingestion data provider.
  repeated Attribute attributes = 2; // List of key/value attributes describing provider.
  Timestamp requestTime = 3; // Specifies time request is sent.
}

/*
 * Data Provider Registration Response
 *
 * The response message contains the UID for the data provider.
 *
 * The data provider UID is contained with the RegistrationDetails message.  If the
 * registration fails a RejectionDetails message is set in lieu of the RegistrationDetails
 * message.
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */
message RegisterProviderResponse {

  Timestamp responseTime = 1; // Indicates time response is sent.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or RegistrationResult indicating success.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    RegistrationResult registrationResult = 11;
  }

 /*
 * Data Provider Registration Result
 *
 * This record message contains the UID of the data provider upon successful registration
 * with the Ingestion Service.
 */
  message RegistrationResult {
    string providerId = 1; // Id uniquely identifies provider, and is sent in subsequent data ingestion requests.
    string providerName = 2; // Echoed from request.
    bool isNewProvider = 3; // flag indicating if provider is determined to be new or previously existing.
  }
}


//
// ------------------- Data Ingestion ---------------------------
//

/*
 * Data Ingestion Request
 *
 * Contains a set of data to be ingested. Message is used for both unary and streaming data ingestion RPC methods.
 *
 * For maximum performance, data ingestion is an asynchronous operation.  The response for a request only indicates
 * if the request is accepted by the ingestion service.  Client (or monitoring tool) must check request status via API
 * or in database to confirm successful handling.
 *
 * TODO: docs for provider name validation
 *
 * The clientRequestId is unique to the provider, and clients may use whatever notation makes sense for the
 * application.  It is assumed that each IngestDataRequest uses a unique clientRequestId so that there is a unique
 * mapping from an ingestion request to the corresponding RequestStatus document in the database.
 */
message IngestDataRequest {
  string providerName = 1; // Required provider name must match name sent to registerProvider() API method.
  string clientRequestId = 2; // Required, client generated identifier uniquely identifying an ingestion request for a provider.
  Timestamp requestTime = 3; // Required, indicates time request is sent.
  repeated Attribute attributes = 4; // Optional, List of key/value attributes describing the request data.
  EventMetadata eventMetadata = 5; // Optional, metadata describing event that request data are associated with.
  IngestionDataFrame ingestionDataFrame = 6; // Required, contains the data for the ingestion request.

/*
 * The unit of ingestion.
 *
 * An IngestionDataFrame contains the data for an ingestion request.  It includes a set of vectors of data and a
 * a specification of the timestamps for the values in those vectors.
 *
 * DataTimestamps can be expressed using either a SamplingClock with start time, sample period,
 * and sample count, or using a TimestampsList with an explicit list of timestamps for the data values.
 *
 * Each DataColumn is a vector of heterogeneous data values for a particular PV, with a single data value for each
 * data timestamp.  Each DataColumn includes the name of the corresponding PV, and a list of DataValues.
 *
 * Each data column must be the same size, with a value for each timestamp specified in dataTimestamps. Ingestion
 * requests with inconsistent dimensions are rejected.
 */
  message IngestionDataFrame {
    DataTimestamps dataTimestamps = 1; // Specifies timestamps for data values.
    repeated DataColumn dataColumns = 2; // Contains list of columns, each containing a data value for each timestamp.
  }
}

/*
 * Data Ingestion Response
 *
 * Response to a particular ingestion request. Message is used for both unary and streaming data ingestion RPC methods.
 * The providerName and clientRequestId fields in a response match the values of those fields in the corresponding request.
 *
 * For maximum performance, data ingestion is an asynchronous operation.  The response for a request only indicates
 * if the request is accepted by the ingestion service.  Client (or monitoring tool) must check request status via API
 * or in database to confirm successful handling.
 *
 * The Ingestion Service performs validation on receipt of an ingestion request, and sends a rejection for an invalid
 * request (e.g., providerName or clientRequestId not specified, inconsistent dimensions of data timestamps and data
 * vectors in request's IngestionDataFrame).
 *
 * For ingestion requests determined to be valid, an AckResult is sent back to the client echoing the dimensions of
 * the request's IngestionDataFrame (numRows and numColumns).
 */
message IngestDataResponse {

  string providerName = 1; // Provider name, echoed from the ingestion request.
  string clientRequestId = 2; // Client generated request identifier, echoed from the ingestion request.
  Timestamp responseTime = 3; // Indicates time response is generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or AckResult with confirmation of request.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    AckResult ackResult = 11;
  }

/*
 * Acknowledgement details for a data ingestion response, echoes the number of rows and columns in the request's
 * data frame.
 */
  message AckResult {
    uint32 numRows = 1; // Echoes number of rows in ingestion data frame.
    uint32 numColumns = 2; // Echoes number of columns in ingestion data frame.
  }
}

/*
 * Unidirectional Streaming Ingestion Response
 *
 * TODO: docs
 */
message IngestDataStreamResponse {

  Timestamp responseTime = 1; // Indicates time response is generated.
  repeated string clientRequestIds = 2; // List of clientRequestIds received in the request stream.
  repeated string rejectedRequestIds = 3; // List of clientRequestIds received in the request stream rejected by service.

  oneof result {
    ExceptionalResult exceptionalResult = 10; // Sent if the service rejected messages in the request stream.
    IngestDataStreamResult ingestDataStreamResult = 11; // Sent if the service accepted all reqquests in stream.
  }

  message IngestDataStreamResult {
    uint32 numRequests = 1; // Number of requests sent in the request stream and accepted by the service.
  }
}


//
// ------------------- Request Status ---------------------------
//

/*
 * QueryRequestStatusRequest
 *
 * TODO: docs
 */
message QueryRequestStatusRequest {

  repeated QueryRequestStatusCriterion criteria = 1;

  message QueryRequestStatusCriterion {

    oneof criterion {
      ProviderIdCriterion providerIdCriterion = 10;
      ProviderNameCriterion providerNameCriterion = 11;
      RequestIdCriterion requestIdCriterion = 12;
      StatusCriterion statusCriterion = 13;
      TimeRangeCriterion timeRangeCriterion = 14;
    }

    message ProviderIdCriterion {
      uint32 providerId = 1;
    }

    message ProviderNameCriterion {
      string providerName = 1;
    }

    message RequestIdCriterion {
      string requestId = 1;
    }

    message StatusCriterion {
      repeated IngestionRequestStatus status = 1;
    }

    message TimeRangeCriterion {
      Timestamp beginTime = 1;
      Timestamp endTime = 2;
    }
  }
}

/*
 * QueryRequestStatusResponse
 *
 * TODO: docs
 */
message QueryRequestStatusResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  oneof result {
    ExceptionalResult exceptionalResult = 10;
    RequestStatusResult requestStatusResult = 11;
  }

  message RequestStatusResult {

    repeated RequestStatus requestStatus = 1;

    message RequestStatus {
      string requestStatusId = 1;
      int32 providerId = 2;
      string requestId = 3;
      IngestionRequestStatus ingestionRequestStatus = 4;
      string statusMessage = 5;
      repeated string idsCreated = 6;
      Timestamp updateTime = 7;
    }
  }
}

enum IngestionRequestStatus {
  INGESTION_REQUEST_STATUS_SUCCESS = 0;
  INGESTION_REQUEST_STATUS_REJECTED = 1;
  INGESTION_REQUEST_STATUS_ERROR = 2;
}
