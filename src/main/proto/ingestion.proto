//
// ingestion.proto
//
// Contains RPC messages and interface specific to the Ingestion Service.
//
// since: July, 2023
// version: 1.0.0
//
// NOTES:
//
//
// TODO:
// - Naming suggestions (CKA)
//

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.ingestion";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * The Ingestion Service Interface
 *
 * Defines RPC operations for data provider registration and ingestion.
 *
 * registerProvider - registers data provider and obtain provide UID
 * ingestData - data ingestion via unary gRPC
 * ingestDataStream - data ingestion via streaming gRPC
 */
service DpIngestionService {
  rpc registerProvider (RegisterProviderRequest) returns (RegisterProviderResponse);
  rpc ingestData (IngestDataRequest) returns (IngestDataResponse);
  rpc ingestDataStream (stream IngestDataRequest) returns (stream IngestDataResponse);
}


//
// ------------------- Provider Registration ---------------------------
//

/*
 * Data provider Registration Request
 *
 * Data providers are registered by name, which must be unique (field providerName).
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */
message RegisterProviderRequest {
  string providerName = 1;
  repeated Attribute attributes = 2;
  Timestamp requestTime = 3;
}

/*
 * Data Provider Registration Response
 *
 * The response message contains the UID for the data provider.
 *
 * The data provider UID is contained with the RegistrationDetails message.  If the
 * registration fails a RejectionDetails message is set in lieu of the RegistrationDetails
 * message.
 *
 * If a data provider has previously registered with the Ingestion Service, its established
 * UID will be returned in the response.  For an initial registration a new UID is
 * created, stored, and returned.
 */
message RegisterProviderResponse {

  ResponseType responseType = 1;
  Timestamp responseTime = 2;

  oneof details {
    RegistrationDetails registrationDetails = 10;
    RejectionDetails rejectionDetails = 11;
  }

 /*
 * Data Provider Registration Details
 *
 * This record message contains the UID of the data provider upon successful registration
 * with the Ingestion Service.
 */
  message RegistrationDetails {
    uint32 providerId = 1;
  }
}


//
// ------------------- Data Ingestion ---------------------------
//

message IngestDataRequest {
  uint32 providerId = 1;
  string clientRequestId = 2;
  Timestamp requestTime = 3;
  repeated Attribute attributes = 4;
  EventMetadata eventMetadata = 5;
  IngestionDataFrame ingestionDataFrame = 6;
}

message IngestDataResponse {

  uint32 providerId = 1;
  string clientRequestId = 2;
  ResponseType responseType = 3;
  Timestamp responseTime = 4;

  oneof details {
    AckDetails ackDetails = 10;
    RejectionDetails rejectionDetails = 11;
  }
}

message AckDetails {
  uint32 numRows = 1;
  uint32 numColumns = 2;
}

/*
 * The unit of ingestion.
 *
 * Data is ingested into the Data Platform in tabular form.  The table consists
 * of a collection of timestamps and an collection of table columns containing
 * heterogeneous data.
 *  - dataTimeSpec - set of (ordered) timestamps for each column
 *  - dataColumns - an (unordered) collection of DataColumn messages.
 *
 * Each data column must be the same size, the number of timestamps identified in dataTimeSpec.
 */
message IngestionDataFrame {
  DataTimestamps dataTimestamps = 1;
  repeated DataColumn dataColumns = 2;
}
